@page "/foods/details"
@using Microsoft.EntityFrameworkCore
@using FoodShopBlazor.Models
@inject IDbContextFactory<FoodShopBlazor.Data.FoodShopBlazorContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Food</h2>
    <hr />
    @if (food is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@food.Name</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@food.Price</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@food.Description</dd>
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@food.ImageUrl</dd>
            <dt class="col-sm-2">RestaurantId</dt>
            <dd class="col-sm-10">@food.RestaurantId</dd>
        </dl>
        <div>
            <a href="@($"/foods/edit?id={food.Id}")">Edit</a> |
            <a href="@($"/foods")">Back to List</a>
        </div>
    }
</div>

@code {
    private Food? food;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        food = await context.Food.FirstOrDefaultAsync(m => m.Id == Id);

        if (food is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
